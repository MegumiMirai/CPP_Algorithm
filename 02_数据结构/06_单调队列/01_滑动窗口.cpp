// 给定一个大小为 n≤106 的数组。

// 有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。

// 你只能在窗口中看到 k 个数字。

// 每次滑动窗口向右移动一个位置。

// 以下是一个例子：

// 该数组为 [1 3 -1 -3 5 3 6 7]，k 为 3。

// 窗口位置	最小值	最大值
// [1 3 -1] -3 5 3 6 7	-1	3
// 1 [3 -1 -3] 5 3 6 7	-3	3
// 1 3 [-1 -3 5] 3 6 7	-3	5
// 1 3 -1 [-3 5 3] 6 7	-3	5
// 1 3 -1 -3 [5 3 6] 7	3	6
// 1 3 -1 -3 5 [3 6 7]	3	7
// 你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。

// 输入格式
// 输入包含两行。

// 第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。

// 第二行有 n 个整数，代表数组的具体数值。

// 同行数据之间用空格隔开。

// 输出格式
// 输出包含两个。

// 第一行输出，从左至右，每个位置滑动窗口中的最小值。

// 第二行输出，从左至右，每个位置滑动窗口中的最大值。

// 输入样例：
// 8 3
// 1 3 -1 -3 5 3 6 7
// 输出样例：
// -1 -3 -3 -3 3 3
// 3 3 5 5 6 7

#include<iostream>
using namespace std;

const int N = 1000010;
int a[N], q[N]; // a数组用来保存从控制台输入进来的数据，q模拟队列，用来保存下标

int main(){
  int n, k;
  cin >> n >> k;
  for(int i = 0; i < n; i++) cin >> a[i];

  int hh = 0, tt = -1;
  for(int i = 0; i < n; i++){
    if(hh <= tt && i - k + 1 > q[hh]) hh++; // 因为每次移动一格，所以不需要用while，如果队列的长度超出了k，就让队头往右移
    while(hh <= tt && a[q[tt]] >= a[i]) tt--; // 队列从后往前，如果队尾的数比a[i]大，就让tt往前移动，因为此时只要a[i]存在，就必然不可能输出比他大的
    q[++tt] = i; // 把这个数存到队列中，如果当前队列中所有数都比它大，那么它就变成了队头，注意，q保存的是下标
    if(i - k + 1 >= 0) cout << a[q[hh]] << " "; // 如果此时队列长度为k，那么就可以输出，防止前几个数不足k
  }
  cout << endl;

  hh = 0, tt = -1;
  for(int i = 0; i < n; i++){
    if(hh <= tt && i - k + 1 > q[hh]) hh++;
    while(hh <= tt && a[q[tt]] <= a[i]) tt--;
    q[++tt] = i;
    if(i - k + 1 >= 0) cout << a[q[hh]] << " ";
  }
  cout << endl;

  return 0;
}