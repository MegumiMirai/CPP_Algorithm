// 几个人一起出去吃饭是常有的事。

// 但在结帐的时候，常常会出现一些争执。

// 现在有 n 个人出去吃饭，他们总共消费了 S 元。

// 其中第 i 个人带了 ai 元。

// 幸运的是，所有人带的钱的总数是足够付账的，但现在问题来了：每个人分别要出多少钱呢？

// 为了公平起见，我们希望在总付钱量恰好为 S 的前提下，最后每个人付的钱的标准差最小。

// 这里我们约定，每个人支付的钱数可以是任意非负实数，即可以不是 1 分钱的整数倍。

// 你需要输出最小的标准差是多少。

// 标准差的介绍：标准差是多个数与它们平均数差值的平方平均数，一般用于刻画这些数之间的“偏差有多大”。

// 形式化地说，设第 i 个人付的钱为 bi 元，那么标准差为 :

// p1.png

// 输入格式
// 第一行包含两个整数 n、S；

// 第二行包含 n 个非负整数 a1, …, an。

// 输出格式
// 输出最小的标准差，四舍五入保留 4 位小数。

// 数据范围
// 1≤n≤5×105,
// 0≤ai≤109,
// 0≤S≤1015。

// 输入样例1：
// 5 2333
// 666 666 666 666 666
// 输出样例1：
// 0.0000
// 输入样例2：
// 10 30
// 2 1 4 7 4 8 3 6 4 7
// 输出样例2：
// 0.7928

/*
思路：
  1. 先让a数组从小到大排序
  2. 计算平均值avg，用res记录结果，s是需要的钱
  3. 遍历a[i]数组，如果a[i]是小于avg，就让他把所有的钱都用了，res += (a[i] - avg) * (a[i] - avg)，然后用s -= a[i]，表示后面的人需要均摊s元
  4. 遍历完了之后，res就是方差，为了得到方差，需要sqrt(res)，需要注意的是，s的范围是（0,1e15），所以s用long double来保存
*/
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;

const int N = 5e5 + 10;
int a[N];
int n;
long double s;

int main(){
    cin >> n >> s;
    for(int i = 0; i < n; i++) cin >> a[i];
    sort(a, a + n);
    long double avg = s / n, res = 0;
    for(int i = 0; i < n; i++){
        double cur = s / (n - i); // cur保存这个人需要付的钱
        if(a[i] < cur) cur = a[i]; // 如果他有的钱不足cur，那么就全部钱都使用
        res += (cur - avg) * (cur - avg); // 计算方差
        s -= cur; // 然后后面的人需要付的钱的总数是 s - cur
    }
    
    printf("%.4Lf\n", sqrt(res / n)); // 最终res是方差，用sqrt(res)来获得标准差
    return 0;
}