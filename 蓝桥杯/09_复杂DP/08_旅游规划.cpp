// W 市的交通规划出现了重大问题，市政府下定决心在全市各大交通路口安排疏导员来疏导密集的车流。

// 但由于人员不足，W 市市长决定只在最需要安排人员的路口安排人员。

// 具体来说，W 市的交通网络十分简单，由 n 个交叉路口和 n−1 条街道构成，交叉路口路口编号依次为 0,1,…,n−1 。

// 任意一条街道连接两个交叉路口，且任意两个交叉路口间都存在一条路径互相连接。

// 经过长期调查，结果显示，如果一个交叉路口位于 W 市交通网最长路径上，那么这个路口必定拥挤不堪。

// 所谓最长路径，定义为某条路径 p=(v1,v2,…,vk)，路径经过的路口各不相同，且城市中不存在长度大于 k 的路径（因此最长路径可能不唯一）。

// 因此 W 市市长想知道哪些路口位于城市交通网的最长路径上。

// 输入格式
// 第一行包含一个整数 n。

// 之后 n−1 行每行两个整数 u,v，表示编号为 u 和 v 的路口间存在着一条街道。

// 输出格式
// 输出包括若干行，每行包括一个整数——某个位于最长路径上的路口编号。

// 为了确保解唯一，请将所有最长路径上的路口编号按编号顺序由小到大依次输出。

// 数据范围
// 1≤n≤2×105
// 输入样例：
// 10
// 0 1
// 0 2
// 0 4
// 0 6
// 0 7
// 1 3
// 2 5
// 4 8
// 6 9
// 输出样例：
// 0
// 1
// 2
// 3
// 4
// 5
// 6
// 8
// 9

/*
获取每个点到其他点最远的两个距离，然后遍历所有点，获得直径
然后在遍历一次每个点，看看这个点最长的长度是否等于直径，如果等于就输出
*/
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 2e5 + 10, M = 2 * N;

int n;
int h[N], e[M], ne[M], idx;
int d1[N], d2[N], p1[N], up[N]; // d1和d2保存这个点最长和次长距离，p1保存该节点向下递归最长距离的子节点，up保存向上递归最长距离
int maxd; // 保存直径长度

void add(int a, int b){
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}

void dfs_d(int u, int father){
    for(int i = h[u]; ~i; i = ne[i]){
        int j = e[i];
        if(j != father){
            dfs_d(j, u);
            int distance = d1[j] + 1; // 获得儿子节点的最长距离加1作为自身的距离
            if(distance > d1[u]){ // 如果它比自身的最长距离还长
                d2[u] = d1[u], d1[u] = distance; // 更新最长距离和次长距离
                p1[u] = j; // 更新最长距离的儿子节点
            }else if(distance > d2[u]){ // 如果大于次长距离，更新
                d2[u] = distance;
            }
        }
    }
    
    maxd = max(maxd, d1[u] + d2[u]); // 获得直径长度
}

void dfs_u(int u, int father){ // 向上递归
    for(int i = h[u]; ~i; i = ne[i]){
        int j = e[i];
        if(j != father){ 
            up[j] = up[u] + 1; 
            if(p1[u] == j) up[j] = max(up[j], d2[u] + 1); // 如果从u往上走，发现跟向下递归最长的节点是同一个，就让他与次长距离去较大值
            else up[j] = max(up[j], d1[u] + 1); // 否则，跟最长距离去较大值
            dfs_u(j, u); // 继续向上递归
        }
    }
}

int main(){
    cin >> n;
    memset(h, -1, sizeof h);
    for(int i = 0; i < n - 1; i++){
        int a, b;
        cin >> a >> b;
        add(a, b), add(b, a);
    }
    
    dfs_d(0, -1); // 先向下递归 获得了这个点向下递归最长的两条距离
    dfs_u(0, -1); // 在向上递归 获得了这个点向上递归最长的距离
    
    for(int i = 0; i < n; i++){ // 遍历每个点
        int d[3] = {d1[i], d2[i], up[i]}; 
        sort(d, d + 3); // 给这个点向下递归最长的两条距离和向上递归最长的距离排序
        if(d[1] + d[2] == maxd) cout << i << endl; // 如果最长的两条距离加起来等于直径，说明它经过直径，输出
    }
    return 0;
}