// Palmia国有一条横贯东西的大河，河有笔直的南北两岸，岸上各有位置各不相同的N个城市。

// 北岸的每个城市有且仅有一个友好城市在南岸，而且不同城市的友好城市不相同。

// 每对友好城市都向政府申请在河上开辟一条直线航道连接两个城市，但是由于河上雾太大，政府决定避免任意两条航道交叉，以避免事故。

// 编程帮助政府做出一些批准和拒绝申请的决定，使得在保证任意两条航线不相交的情况下，被批准的申请尽量多。

// 输入格式
// 第1行，一个整数N，表示城市数。

// 第2行到第n+1行，每行两个整数，中间用1个空格隔开，分别表示南岸和北岸的一对友好城市的坐标。

// 输出格式
// 仅一行，输出一个整数，表示政府所能批准的最多申请数。

// 数据范围
// 1≤N≤5000,
// 0≤xi≤10000
// 输入样例：
// 7
// 22 4
// 2 6
// 10 3
// 15 12
// 9 8
// 17 17
// 4 2
// 输出样例：
// 4

/*
要让他们不相交，也就是说两个序列要同时是递增的
所以用一个pair将他们存起来，先从小到大排序，保证了北边是递增的，随后在南边求一个最长上升子序列，取最大值，就是结果，这样保证了北边和南边同时都是递增的
*/
#include <iostream>
#include <cstring>
#include <algorithm>

#define x first
#define y second

using namespace std;
typedef pair<int, int> PII;
const int N = 5010;
PII a[N];
int f[N];

int main(){
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) cin >> a[i].x >> a[i].y;
    sort(a, a + n);
    
    int res = 0;
    for(int i = 0; i < n; i++){
        f[i] = 1;
        for(int j = 0; j < i; j++)
            if(a[i].y > a[j].y)
                f[i] = max(f[i], f[j] + 1);
        res = max(res, f[i]);
    }
    cout << res << endl;
    
    return 0;
}